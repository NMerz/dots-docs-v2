openapi: 3.1.0
x-stoplight:
  id: o2py3ybt8pfmf
info:
  title: dots api
  version: "1.0"
  summary: Dots Payout API
  description: Scalable and Flexible Payouts Infrastructure
  contact:
    name: Kartikye Mittal
    url: "https://dots.dev"
    email: info@dots.dev
servers:
  - url: "https://api.dots.dev/api"
    description: Production
tags:
  - name: users
    description: User routes
  - name: transfers
    description: Transfer routes
  - name: flows
    description: Flow routes
  - name: payouts
    description: Payout Routes
  - name: payout-links
    description: Payout Link Routes
  - name: payout-requests
    description: Payout Request Routes
  - name: transactions
    description: Transaction Routes
paths:
  /v2/users:
    get:
      summary: List all Users
      tags:
        - users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/user"
                  has_more:
                    type: boolean
      operationId: get-users
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: starting_after
          description: "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `starting_after`=`aaa` in order to fetch the next page of the list."
        - schema:
            type: integer
          in: query
          name: limit
          description: "A limit on the number of objects to be returned, between 1 and 100."
        - schema:
            type: string
            format: uuid
          in: query
          name: ending_before
          description: "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `ending_before`=`aaa` in order to fetch the previous page of the list."
      description: List all users connected to your application.
    post:
      summary: Create a User
      operationId: create-user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: The user's first name.
                last_name:
                  type: string
                  description: The user's last name.
                email:
                  type: string
                  format: email
                  description: The user's email address.
                country_code:
                  type: string
                  description: The user's phone number country code. e.g. "1"
                phone_number:
                  type: string
                  description: The user's phone number. e.g. "4157223331"
                username:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: Username to assign the user.
                metadata:
                  type:
                    - string
                    - object
                  description: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
              required:
                - first_name
                - last_name
                - email
                - country_code
                - phone_number
            examples:
              Example:
                value:
                  first_name: Bob
                  last_name: Loblaw
                  email: bob@bobloblaw.com
                  country_code: "1"
                  phone_number: "4154332334"
                  metadata:
                    internal_id: user_121344
        description: ""
      description: Create a user.
      tags:
        - users
    parameters: []
  "/v2/users/{user_id}":
    parameters:
      - schema:
          type: string
          format: uuid
        name: user_id
        in: path
        required: true
        description: Id of the user to fetch
    get:
      summary: Retrieve a User
      tags:
        - users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
      operationId: get-user
      description: Get a user by their id.
    delete:
      summary: Delete a User
      operationId: delete-user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
      description: Delete a user.
      tags:
        - users
  "/v2/users/{user_id}/compliance":
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
        description: Id of the user to fetch
    put:
      summary: Submit Compliance Information
      operationId: submit-compliance
      responses:
        "200":
          description: OK
      description: Add Compliance information to a user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                w9:
                  type: object
                  properties:
                    entity_type:
                      type: string
                      enum:
                        - individual
                        - business
                    business_name:
                      type: string
                      description: Legal bussiness name. Required if `entity_type` is business.
                    date_of_birth:
                      type: string
                      format: date
                      description: Required if `entity_type` is individual.
                    tin:
                      type: string
                      minLength: 9
                      maxLength: 9
                      description: SSN if `entity_type` is `individual`. EIN if `entity_type` is `business`.
                    address:
                      type: object
                      required:
                        - line_1
                        - city
                        - state
                        - country
                        - postcode
                      properties:
                        line_1:
                          type: string
                        line_2:
                          type: string
                        city:
                          type: string
                        state:
                          type: string
                        country:
                          type: string
                        postcode:
                          type: string
                  required:
                    - entity_type
                    - tin
                    - address
                    - date_of_birth
                w8ben:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Full name of the person.
                    citizenship_country:
                      type: string
                      description: The two-letter ISO country code associated with the beneficial owner's citizenship.
                    date_of_birth:
                      type: string
                      format: date
                    tin:
                      type: string
                      minLength: 9
                      maxLength: 9
                      description: SSN
                    foreign_tax_id:
                      type: string
                      description: The tax identification number associated with the beneficial owner's country of residence.
                    tax_treaty_country:
                      type: string
                      description: The two-letter ISO country code of the country for tax treaty purposes.
                    tax_treaty_citation:
                      type: string
                      description: The article and paragraph of the citation claimed for tax treaty purposes.
                    tax_treaty_rate:
                      type: number
                      description: "The withholding rate claimed for tax treaty purposes. For example, a 15% rate would be represented as 0.15."
                    tax_treaty_income_type:
                      type: string
                      enum:
                        - interest1
                        - dividend6
                        - dividend7
                        - pension15
                        - socialSecurity
                        - equipment10
                        - knowhow10
                        - patent10
                        - film11
                        - copyright12
                      description: The type of income for tax treaty purposes. Valid values are - interest1 (Interest Paid by U.S. Obligors) - dividend6 (Dividends Paid by U.S. Corporations) - dividend7 (Dividends Qualifying for Direct Dividend Rate) - pension15 (Pensions and Annuities) - socialSecurity (Social Security) - equipment10 (Industrial Equipment) - knowhow10 (Know-How/Other Industrial Royalties) - patent10 (Patents) - film11 (Film & TV) - copyright12 (Copyrights)
                    tax_treaty_explanation:
                      type: string
                      description: An optional explanation for the tax treaty claimed.
                    address:
                      type: object
                      required:
                        - line_1
                        - city
                        - state
                        - country
                        - postcode
                      properties:
                        line_1:
                          type: string
                        line_2:
                          type: string
                        city:
                          type: string
                        state:
                          type: string
                        country:
                          type: string
                        postcode:
                          type: string
                    signature:
                      type: object
                      properties:
                        consent:
                          type: boolean
                          description: The consent of the beneficial owner to the disclosure of their information to the IRS.
                        name:
                          type: string
                          description: The name of the person signing the form.
                        email:
                          type: string
                          description: The email address of the person signing the form.
                      required:
                        - consent
                        - name
                        - email
                  required:
                    - name
                    - citizenship_country
                    - date_of_birth
                    - signature
                    - tin
                    - address
      tags:
        - users
  "/v2/users/{user_id}/send-verification-token":
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
        description: Id of the user to fetch
    post:
      summary: Send a Verification Token
      operationId: send-verification-token
      responses:
        "202":
          description: Accepted
      description: Send a user a verification token.
      tags:
        - users
  "/v2/users/{user_id}/verify":
    parameters:
      - schema:
          type: string
          format: uuid
        name: user_id
        in: path
        required: true
        description: Id of the user to fetch
    post:
      summary: Verify a User
      operationId: verify
      responses:
        "200":
          description: OK
        "400":
          description: Incorrect token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  minLength: 6
                  description: The token sent to the user.
              required:
                - token
      description: Verify a user with a token.
      tags:
        - users
  "/v2/users/{user_id}/payout-methods":
    parameters:
      - schema:
          type: string
          format: uuid
        name: user_id
        in: path
        required: true
        description: Id of the user to fetch
    get:
      summary: Retrieve a Payout Method
      tags:
        - users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/payment-method"
      operationId: get-payout-methods
      description: Get a user's connected payout methods.
    put:
      summary: Add a Payout Method
      operationId: add-payout-method
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/payment-method"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                platform:
                  type: string
                  enum:
                    - paypal
                    - venmo
                    - cash_app
                    - ach
                  description: Payout platform to add.
                routing_number:
                  type: string
                  description: Bank account or Cash App routing number. Required if `platform` = `ach` or `cash_app`.
                account_number:
                  type: string
                  description: Bank account or Cash App account number. Required if `platform` = `ach` or `cash_app`.
                account_type:
                  type: string
                  enum:
                    - checking
                    - savings
                  description: Bank account type. Required if `platform` = `ach`.
                email:
                  type: string
                  description: PayPal email address. Required if `platform` = `paypal`.
                phone_number:
                  type: string
                  description: Venmo phone number. Required if `platform` = `venmo`.
                cash_tag:
                  type: string
                  description: Cash App Cash Tag. Required if `platform` = `cash_app`.
              required:
                - platform
            examples:
              Bank Account:
                value:
                  platform: ach
                  routing_number: "123456789"
                  account_number: "123456789"
                  account_type: checking
              PayPal:
                value:
                  platform: paypal
                  email: bob.loblaw@gmail.com
              Venmo:
                value:
                  platform: venmo
                  phone_number: "4158934432"
              Cash App:
                value:
                  platform: cash_app
                  routing_number: "123456789"
                  account_number: "123456789"
                  cash_tag: $cash_tag
      description: "Add a payout method to the user. Payout method can be one of `paypal`, `venmo`, `ach`, or `cash_app`. Each method has different required parameters."
      tags:
        - users
  /v2/transfers:
    get:
      summary: List all Transfers
      tags:
        - transfers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  has_more:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/transfer"
      operationId: get-transfers
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: "A limit on the number of objects to be returned, between 1 and 100."
        - schema:
            type: string
            format: uuid
          in: query
          name: starting_after
          description: "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `starting_after`=`aaa` in order to fetch the next page of the list."
        - schema:
            type: string
            format: uuid
          in: query
          name: ending_before
          description: "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `ending_before`=`aaa` in order to fetch the previous page of the list."
        - schema:
            type: string
            format: uuid
          in: query
          name: user_id
          description: Include only results with this user ID attached.
      description: List all transfers.
    post:
      summary: Create a Transfer
      operationId: create-transfer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transfer"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  description: The amount in cents to transfer. Negative amount transfers money from the `app` to the `user`.
                user_id:
                  type: string
                  format: uuid
                  description: The user's id.
                tax_exempt:
                  type:
                    - boolean
                    - "null"
                  description: Transfers marked as `tax_exempt` will not be counted towards the 1099 threshold.
                idempotency_key:
                  type:
                    - string
                    - "null"
                  format: uuid
                metadata:
                  type:
                    - string
                    - object
                    - "null"
                  description: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
              required:
                - amount
                - user_id
            examples:
              Send Funds to User:
                value:
                  amount: -1000
                  user_id: a169451c-8525-4352-b8ca-070dd449a1a5
              Debi Funds from User:
                value:
                  amount: -1000
                  user_id: a169451c-8525-4352-b8ca-070dd449a1a5
        description: ""
      description: Create a transfer.
      tags:
        - transfers
    parameters: []
  "/v2/transfers/{transfer_id}":
    parameters:
      - schema:
          type: string
          format: uuid
        name: transfer_id
        in: path
        required: true
        description: Id of the transfer to fetch
    get:
      summary: Get a Transfer
      tags:
        - transfers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transfer"
      operationId: get-transfer
      description: Get a transfer by its id.
  /v2/flows:
    get:
      summary: List all Flows
      tags:
        - flows
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  has_more:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/flow"
      operationId: get-flows
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: "A limit on the number of objects to be returned, between 1 and 100."
        - schema:
            type: string
            format: uuid
          in: query
          name: starting_after
          description: "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `starting_after`=`aaa` in order to fetch the next page of the list."
        - schema:
            type: string
            format: uuid
          in: query
          name: ending_before
          description: "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `ending_before`=`aaa` in order to fetch the previous page of the list."
      description: List all Flows.
    post:
      summary: Create a Flow
      operationId: create-flow
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/flow"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                steps:
                  type: array
                  uniqueItems: true
                  description: 'A list of steps. Can either be a string or an object with additional properties. Example: A `redirect` step looks like {"name": "redirect", "redirect_url": "https://example.com"}'
                  items:
                    oneOf:
                      - type: string
                        enum:
                          - compliance
                          - id-verification
                          - manage-payouts
                          - manage-payments
                          - payout
                      - type: object
                        properties:
                          name:
                            type: string
                            enum:
                              - compliance
                              - id-verification
                              - manage-payouts
                              - manage-payments
                              - payout
                              - redirect
                          auto_payout_enabled:
                            type: boolean
                          redirect_url:
                            type: string
                            pattern: https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)
                        required: [name]
                user_id:
                  type: string
                  format: uuid
                  description: The user's id.
                metadata:
                  type:
                    - string
                    - object
                  description: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
              required:
                - steps
      description: Create a new Flow.
      tags:
        - flows
  "/v2/flows/{flow_id}":
    parameters:
      - schema:
          type: string
          format: uuid
        name: flow_id
        in: path
        required: true
        description: Id of the flow to fetch
    get:
      summary: Retrieve a Flow
      tags:
        - flows
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/flow"
      operationId: get-flow
      description: Get a Flow by its id.
  /v2/payout-links:
    get:
      summary: List all Payout Links
      tags:
        - payout-links
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  has_more:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/payout-link"
      operationId: get-payout-links
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: "A limit on the number of objects to be returned, between 1 and 100."
        - schema:
            type: string
            format: uuid
          in: query
          name: starting_after
          description: "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `starting_after`=`aaa` in order to fetch the next page of the list."
        - schema:
            type: string
            format: uuid
          in: query
          name: ending_before
          description: "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `ending_before`=`aaa` in order to fetch the previous page of the list."
      description: List all created Payout Links.
    post:
      summary: Create a Payout Link
      operationId: create-payout-link
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/payout-link"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                user_id:
                  type: string
                  format: uuid
                  description: The user's id.
                payee:
                  type: object
                  description: The payee. This is optional.
                  properties:
                    first_name:
                      type: string
                    last_name:
                      type: string
                    country_code:
                      type: string
                    phone_number:
                      type: string
                    email:
                      type: string
                amount:
                  type: integer
                delivery:
                  type: object
                  properties:
                    message:
                      type: string
                    method:
                      type: string
                      enum:
                        - sms
                        - link
                        - email
                      description: "Delivery method. `sms` requires `payee.country_code` and `payee.phone_number`, `email` required `payee.email`."
                force_collect_compliance_information:
                  type: boolean
                  default: false
                  description: Force the collection of 1099 or W-8 information. Defaults to `false`.
                metadata:
                  type:
                    - string
                    - object
                memo:
                  type: string
                  description: Add a memo to the top of the Payout Link
              required:
                - amount
      description: Create a Payout Link.
      tags:
        - payout-links
  "/v2/payout-links/{payout_link_id}":
    parameters:
      - schema:
          type: string
        name: payout_link_id
        in: path
        required: true
        description: Id of the payout link
    get:
      summary: Retrieve a Payout Link
      tags:
        - payout-links
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/payout-link"
      operationId: get-payout-link
      description: Get a payout link by its id.
    delete:
      summary: Delete a Payout Link
      operationId: delete-payout-link
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/payout-link"
      description: Cancel a payout link
      tags:
        - payout-links
  /v2/payouts:
    post:
      summary: Create a Payout
      operationId: create-payout
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transfer"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                amount:
                  type: integer
                  exclusiveMinimum: 0
                platform:
                  type: string
                  enum:
                    - paypal
                    - venmo
                    - ach
                    - bank_transfer
                    - cash_app
                    - default
                account_id:
                  type: string
                  description: Required for `ach` and `intl_bank`
                fund:
                  type: boolean
                metadata:
                  type:
                    - string
                    - object
              required:
                - user_id
                - amount
                - platform
        description: ""
      description: Create a payout for an existing user that has a payout method saved to their account.
      tags:
        - payouts
  /v2/payments:
    post:
      summary: "Create a Payment"
      operationId: create-payment
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transfer"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                amount:
                  type: integer
                  exclusiveMinimum: 0
                platform:
                  type: string
                  enum: [ach]
                account_id:
                  type: [string, null]
                  description: The user's ACH account ID.
                metadata: {}
              required: [user_id, amount, platform]
              if:
                properties: { platform: { const: ach } }
              then:
                required: [account_id]
      description: Creates a transaction from a user's stored payment method to
        the app. User the `/users/{user_id}/payout-methods` route to get
        a user's stored payment methods.
  /v2/payouts/send-payout:
    parameters: []
    post:
      summary: Send a Payout
      operationId: send-payout
      responses:
        "201":
          description: Created
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              type: object
              properties:
                amount:
                  type: integer
                  description: The amount in cents to pay the user.
                  exclusiveMinimum: 0
                user_id:
                  type: string
                  format: uuid
                  description: The user's id. `user_id` or `payee` is required.
                payee:
                  type: object
                  description: The payee's phone number. `user_id` or `payee` is required.
                  properties:
                    country_code:
                      type: string
                    phone_number:
                      type: string
                  required:
                    - country_code
                    - phone_number
                delivery:
                  type: object
                  properties:
                    message:
                      type: string
                      description: Message to send with the payout through sms.
                force_collect_compliance_information:
                  type: boolean
                  default: false
                  description: Collect 1099 or w8-ben information.
                metadata:
                  type:
                    - string
                    - object
                  description: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
                memo:
                  type: string
                  description: Add a memo to the top of the Payout Link
              required:
                - amount
      description: "Send a payout to a person when you know their phone number or user id. If the user has a Dots acconut, the funds will delivered according to their saved prefernces. Otherwise, they will be sent a Payout Link to onboard and recieve funds."
      tags:
        - payouts
  /v2/payout-requests:
    parameters: []
    post:
      summary: Create a Payout Request
      operationId: create-payouts-request
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/payout-request"
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              type: object
              properties:
                amount:
                  type: integer
                  description: The amount in cents to pay the user.
                  exclusiveMinimum: 0
                user_id:
                  type: string
                  format: uuid
                  description: The user's id. `user_id` or `payee` is required.
                payee:
                  type: object
                  description: The payee's phone number. `user_id` or `payee` is required.
                  properties:
                    country_code:
                      type: string
                    phone_number:
                      type: string
                  required:
                    - country_code
                    - phone_number
                metadata:
                  type:
                    - string
                    - object
                  description: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
                memo:
                  type: string
                  description: Add a memo to payout request
              required:
                - amount
      description: "Submit a payout request from a person when you know their phone number or user id. Once the payout request is approved, they will be sent a Payout Link to onboard and recieve funds."
      tags:
        - payout-requests
    get:
      summary: List all Payout Requests
      tags:
        - payout-requests
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  has_more:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/payout-request"
      operationId: get-payout-requests
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: "A limit on the number of objects to be returned, between 1 and 100."
        - schema:
            type: string
            format: uuid
          in: query
          name: starting_after
          description: "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `starting_after`=`aaa` in order to fetch the next page of the list."
        - schema:
            type: string
            format: uuid
          in: query
          name: ending_before
          description: "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `ending_before`=`aaa` in order to fetch the previous page of the list."
      description: List all payout requests.
  "/v2/payout-requests/{payout_request_id}":
    parameters:
      - schema:
          type: string
        name: payout_request_id
        in: path
        required: true
        description: Id of the payout request
    get:
      summary: Retrieve a Payout Request
      tags:
        - payout-requests
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/payout-request"
      operationId: get-payout-request
      description: Get a payout request by its id.
  /v2/transactions:
    get:
      summary: List all Transactions
      tags:
        - transactions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  has_more:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/transaction"
      operationId: get-transactions
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: "A limit on the number of objects to be returned, between 1 and 100."
        - schema:
            type: string
            format: uuid
          in: query
          name: starting_after
          description: "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `starting_after`=`aaa` in order to fetch the next page of the list."
        - schema:
            type: string
            format: uuid
          in: query
          name: ending_before
          description: "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `ending_before`=`aaa` in order to fetch the previous page of the list."
      description: List all transactions.
  "/v2/transactions/{transaction_id}":
    parameters:
      - schema:
          type: string
        name: transaction_id
        in: path
        required: true
        description: Id of the transaction
    get:
      summary: Retrieve a Transaction
      tags:
        - transactions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transaction"
      operationId: get-transaction
      description: Get a transaction by its id.
components:
  schemas:
    flow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        user_id:
          type:
            - string
            - "null"
          format: uuid
        steps:
          type: array
          items:
            type: string
            enum:
              - compliance
              - id-verification
              - manage-payments
              - manage-payouts
              - payout
        completed_steps:
          type: array
          items:
            type: string
            enum:
              - compliance
              - id-verification
              - manage-payments
              - manage-payouts
              - payout
        link:
          type: string
          format: uri
        metadata:
          type:
            - string
            - object
            - "null"
    payment-method:
      type: object
      description: ""
      properties:
        id:
          type: string
        platform:
          enum:
            - ach
            - paypal
            - venmo
            - cash_app
            - intl_transfer
        description:
          type: string
        mask:
          type: string
        email:
          type: string
        phone_number:
          type: string
        cash_tag:
          type: string
        country:
          type: string
          format: iso3166
        currency:
          type: string
          format: iso4217
      required:
        - platform
    payout-link:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        link:
          type: string
          format: uri
        amount:
          type: number
        status:
          type: string
          enum:
            - claimed
            - delivery_pending
            - delivery_failed
            - delivered
            - canceled
        payee:
          type: object
          properties:
            first_name:
              type: string
            last_name:
              type: string
            email:
              type: string
              format: email
            country_code:
              type: string
            phone_number:
              type: string
        delivery:
          type: object
          properties:
            method:
              type: string
              enum:
                - link
                - sms
                - email
            email:
              type: string
              format: email
            country_code:
              type: string
            phone_number:
              type: string
        tax_exempt:
          type: boolean
        claimed_user_id:
          type: string
          format: uuid
        metadata:
          type:
            - string
            - object
            - "null"
    payout-request:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        amount:
          type: number
        status:
          type: string
          enum:
            - created
            - approved
            - rejected
        payee:
          type: object
          properties:
            country_code:
              type: string
            phone_number:
              type: string
        payout-link:
          $ref: "#/components/schemas/payout-link"
        user:
          $ref: "#/components/schemas/user"
        metadata:
          type:
            - string
            - object
            - "null"
        memo:
          type:
            - string
    transaction:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: number
        created:
          type: string
          format: date-time
        source_name:
          type: string
        destination_name:
          type: string
        metadata:
          type:
            - string
            - object
            - "null"
    transfer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        user_id:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - created
            - pending
            - failed
            - completed
            - flagged
        type:
          type: string
          enum:
            - refill
            - payout
            - balance
        amount:
          type: number
        external_data:
          type: object
          properties:
            account_id:
              type: string
            external_id:
              type: string
            platform:
              type: string
              enum:
                - ach
                - paypal
                - venmo
                - visa
                - amazon
                - cash_app
                - intl_bank
                - intl_transfer
                - bank_transfer
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/transaction"
        metadata:
          type:
            - string
            - object
            - "null"
    user:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone_number:
          type: object
          properties:
            country_code:
              type: string
            phone_number:
              type: string
        wallet:
          $ref: "#/components/schemas/wallet"
        compliance:
          type: object
          properties:
            tax_id_collected:
              type: boolean
            address_collected:
              type: boolean
            date_of_birth_collected:
              type: boolean
            1099_collected:
              type: boolean
            w8_ben_collected:
              type: boolean
            flagged:
              type: boolean
            id_verified:
              type: boolean
        metadata:
          type:
            - string
            - object
            - "null"
    wallet:
      type: object
      properties:
        amount:
          type: integer
        withdrawable_amount:
          type: integer
        credit_balance:
          type: integer
  securitySchemes:
    api_key:
      type: http
      scheme: basic
security:
  - api_key: []
